name: Deploy to PythonAnywhere

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 獲取所有歷史記錄，幫助更好地檢測變更
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install requests  # 用於API調用
      
      - name: Prepare files for deployment
        run: |
          echo "==== 準備部署文件 ===="
          
          # 獲取已修改的文件清單
          echo "獲取最近提交修改的文件..."
          git diff --name-only HEAD~1 HEAD > changed_files.txt
          
          # 如果沒有找到變更的文件，則使用一個基本的文件列表
          if [ ! -s changed_files.txt ]; then
            echo "沒有檢測到變更的文件，將部署關鍵文件..."
            
            # 創建一個簡單的關鍵文件列表
            cat > changed_files.txt << EOF
          app/templates/common/layout.html
          app/templates/japanese/index.html
          app/routes/japanese_routes.py
          app.py
          config.py
          EOF
          fi
          
          # 列出將要部署的文件
          echo "將部署以下文件:"
          cat changed_files.txt
          
          # 創建部署清單
          echo "創建部署清單..."
          mkdir -p deploy_files
          while IFS= read -r file; do
            # 確保文件存在
            if [ -f "$file" ]; then
              # 創建目錄結構
              mkdir -p "deploy_files/$(dirname "$file")"
              # 複製文件
              cp "$file" "deploy_files/$file"
              echo "✅ 準備部署: $file"
            else
              echo "⚠️ 文件不存在，跳過: $file"
            fi
          done < changed_files.txt
      
      - name: Deploy to PythonAnywhere
        run: |
          echo "==== 開始部署到PythonAnywhere ===="
          
          # 創建Python部署腳本
          cat > direct_deploy.py << 'EOF'
          import os
          import sys
          import requests
          import time
          
          # 獲取環境變量
          api_token = os.environ.get('API_TOKEN')
          username = os.environ.get('PA_USERNAME')
          
          if not all([api_token, username]):
              print("❌ 環境變量缺失")
              sys.exit(1)
          
          # API URL
          api_base = f"https://www.pythonanywhere.com/api/v0/user/{username}"
          headers = {'Authorization': f'Token {api_token}'}
          
          def upload_file(local_path, remote_path):
              """通過API上傳單個文件"""
              try:
                  # 檢查文件是否存在
                  if not os.path.exists(local_path):
                      print(f"❌ 本地文件不存在: {local_path}")
                      return False
                  
                  # 獲取遠程目錄路徑
                  remote_dir = os.path.dirname(remote_path)
                  
                  # 確保遠程目錄存在
                  ensure_directory(remote_dir)
                  
                  # 讀取文件內容
                  with open(local_path, 'rb') as f:
                      file_content = f.read()
                  
                  # 創建上傳URL
                  url = f"{api_base}/files/path{remote_path}"
                  
                  # 先嘗試刪除現有文件（如果存在）
                  try:
                      delete_response = requests.delete(url, headers=headers)
                      if delete_response.status_code not in (200, 204, 404):
                          print(f"⚠️ 刪除現有文件失敗: {remote_path} (HTTP {delete_response.status_code})")
                  except Exception as e:
                      print(f"⚠️ 刪除文件時出錯: {str(e)}")
                  
                  # 上傳新文件
                  response = requests.post(
                      url,
                      headers=headers,
                      files={'content': (os.path.basename(local_path), file_content)}
                  )
                  
                  if response.status_code in (200, 201):
                      print(f"✅ 文件上傳成功: {remote_path}")
                      return True
                  else:
                      print(f"❌ 文件上傳失敗: {remote_path} (HTTP {response.status_code})")
                      print(f"響應: {response.text[:200]}...")
                      return False
              except Exception as e:
                  print(f"❌ 上傳文件時發生錯誤: {str(e)}")
                  return False
          
          def ensure_directory(path):
              """確保目錄存在"""
              # 跳過根目錄
              if path == "/" or not path:
                  return True
              
              # 確保父目錄存在
              parent = os.path.dirname(path)
              if parent and parent != "/":
                  ensure_directory(parent)
              
              # 創建目錄
              try:
                  url = f"{api_base}/files/path{path}/"
                  response = requests.post(url, headers=headers)
                  
                  if response.status_code in (200, 201, 409):  # 200/201=成功，409=已存在
                      return True
                  else:
                      print(f"⚠️ 創建目錄失敗: {path} (HTTP {response.status_code})")
                      return False
              except Exception as e:
                  print(f"⚠️ 創建目錄時發生錯誤: {str(e)}")
                  return False
          
          def reload_webapp():
              """重新加載Web應用"""
              print("重新加載Web應用...")
              
              try:
                  response = requests.post(
                      f"{api_base}/webapps/{username}.pythonanywhere.com/reload/",
                      headers=headers
                  )
                  
                  # 檢查是否為HTML響應
                  content_type = response.headers.get('Content-Type', '')
                  if 'text/html' in content_type:
                      print("⚠️ 收到HTML響應而非API響應，可能是API令牌問題")
                      print(f"響應內容: {response.text[:200]}...")
                      return False
                  
                  if response.status_code == 200:
                      print("✅ Web應用已成功重新加載")
                      return True
                  else:
                      print(f"⚠️ 重新加載失敗: HTTP {response.status_code}")
                      print(f"響應: {response.text}")
                      return False
              except Exception as e:
                  print(f"❌ 重新加載Web應用時發生錯誤: {str(e)}")
                  return False
          
          def deploy():
              """執行部署流程"""
              # 處理根目錄
              base_dir = "deploy_files"
              remote_base = f"/home/{username}/learnflask"
              
              # 確保根目錄存在
              ensure_directory(remote_base)
              
              # 創建數據和緩存目錄
              ensure_directory(f"{remote_base}/app/data")
              ensure_directory(f"{remote_base}/cache")
              
              # 上傳所有文件
              success_count = 0
              failed_count = 0
              
              for root, dirs, files in os.walk(base_dir):
                  for file in files:
                      # 本地文件路徑
                      local_path = os.path.join(root, file)
                      
                      # 計算相對路徑（相對於部署目錄）
                      rel_path = os.path.relpath(local_path, base_dir)
                      
                      # 遠程路徑
                      remote_path = f"{remote_base}/{rel_path}"
                      
                      # 上傳文件
                      if upload_file(local_path, remote_path):
                          success_count += 1
                      else:
                          failed_count += 1
                      
                      # 避免API限制
                      time.sleep(0.5)
              
              print(f"文件上傳完成: {success_count} 成功, {failed_count} 失敗")
              
              # 重新加載Web應用
              reload_webapp()
              
              print("✅ 部署完成！")
          
          # 執行部署
          deploy()
          EOF
          
          # 設置環境變量並執行Python腳本
          export API_TOKEN="${{ secrets.PA_API_TOKEN }}"
          export PA_USERNAME="${{ secrets.PA_USERNAME }}"
          
          # 執行部署腳本
          python direct_deploy.py
      
      - name: Final Cleanup
        if: always()
        run: |
          echo "清理完成，部署結束"
          # 刪除敏感文件
          rm -f direct_deploy.py
          rm -rf deploy_files

