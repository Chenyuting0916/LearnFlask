name: Deploy to PythonAnywhere

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 獲取所有歷史記錄，幫助更好地檢測變更
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Deploy to PythonAnywhere using Git pull
        run: |
          echo "==== 開始使用Git部署 ===="
          
          # 設置變量
          API_TOKEN="${{ secrets.PA_API_TOKEN }}"
          API_BASE="https://www.pythonanywhere.com/api/v0/user/${{ secrets.PA_USERNAME }}"
          
          # 1. 創建bash控制台
          echo "創建bash控制台..."
          curl -X POST "$API_BASE/consoles/" \
            -H "Authorization: Token $API_TOKEN" \
            -d "executable=bash" \
            -d "arguments=" \
            -d "working_directory=/home/${{ secrets.PA_USERNAME }}/learnflask" \
            > console_response.json
          
          CONSOLE_ID=$(cat console_response.json | grep -o '"id":[^,]*' | cut -d':' -f2 | tr -d ' "')
          
          if [ -z "$CONSOLE_ID" ]; then
            echo "❌ 無法創建控制台！"
            exit 1
          fi
          
          echo "✅ 已創建控制台，ID: $CONSOLE_ID"
          
          # 等待控制台就緒
          sleep 2
          
          # 2. 如果目錄不存在，則克隆倉庫；否則拉取最新代碼
          echo "檢查Git倉庫是否已存在..."
          curl -X POST "$API_BASE/consoles/$CONSOLE_ID/send_input/" \
            -H "Authorization: Token $API_TOKEN" \
            -d "input=if [ -d '/home/${{ secrets.PA_USERNAME }}/learnflask/.git' ]; then echo 'REPO_EXISTS'; else echo 'REPO_NOT_EXISTS'; fi"
          
          # 等待檢查完成
          sleep 3
          
          # 獲取控制台輸出
          CONSOLE_OUTPUT=$(curl -s "$API_BASE/consoles/$CONSOLE_ID/get_latest_output/" \
            -H "Authorization: Token $API_TOKEN")
          
          if echo "$CONSOLE_OUTPUT" | grep -q "REPO_EXISTS"; then
            echo "✅ Git倉庫已存在，執行git pull..."
            
            # 執行git pull
            curl -X POST "$API_BASE/consoles/$CONSOLE_ID/send_input/" \
              -H "Authorization: Token $API_TOKEN" \
              -d "input=cd /home/${{ secrets.PA_USERNAME }}/learnflask && git pull"
          else
            echo "⚠️ Git倉庫不存在，執行git clone..."
            
            # 先創建父目錄（如果需要）
            curl -X POST "$API_BASE/consoles/$CONSOLE_ID/send_input/" \
              -H "Authorization: Token $API_TOKEN" \
              -d "input=mkdir -p /home/${{ secrets.PA_USERNAME }}"
              
            # 克隆倉庫
            curl -X POST "$API_BASE/consoles/$CONSOLE_ID/send_input/" \
              -H "Authorization: Token $API_TOKEN" \
              -d "input=cd /home/${{ secrets.PA_USERNAME }} && git clone https://github.com/${{ github.repository }}.git learnflask"
          fi
          
          # 等待git操作完成
          sleep 5
          
          # 獲取控制台輸出
          GIT_OUTPUT=$(curl -s "$API_BASE/consoles/$CONSOLE_ID/get_latest_output/" \
            -H "Authorization: Token $API_TOKEN")
            
          echo "Git操作輸出: $GIT_OUTPUT"
          
          # 3. 確保存在data和cache目錄
          echo "確保data和cache目錄存在..."
          curl -X POST "$API_BASE/consoles/$CONSOLE_ID/send_input/" \
            -H "Authorization: Token $API_TOKEN" \
            -d "input=mkdir -p /home/${{ secrets.PA_USERNAME }}/learnflask/app/data /home/${{ secrets.PA_USERNAME }}/learnflask/cache"
            
          # 4. 清理緩存文件
          echo "清理Python緩存文件..."
          curl -X POST "$API_BASE/consoles/$CONSOLE_ID/send_input/" \
            -H "Authorization: Token $API_TOKEN" \
            -d "input=find /home/${{ secrets.PA_USERNAME }}/learnflask -path \"*/app/data\" -prune -o -path \"*/cache\" -prune -o -name \"__pycache__\" -type d -exec rm -rf {} + 2>/dev/null || true"
            
          curl -X POST "$API_BASE/consoles/$CONSOLE_ID/send_input/" \
            -H "Authorization: Token $API_TOKEN" \
            -d "input=find /home/${{ secrets.PA_USERNAME }}/learnflask -path \"*/app/data\" -prune -o -path \"*/cache\" -prune -o -name \"*.pyc\" -delete"
            
          # 5. 驗證關鍵文件
          echo "驗證關鍵文件..."
          CRITICAL_FILES="app/templates/common/layout.html app/templates/japanese/index.html app/routes/japanese_routes.py"
          for file in $CRITICAL_FILES; do
            curl -X POST "$API_BASE/consoles/$CONSOLE_ID/send_input/" \
              -H "Authorization: Token $API_TOKEN" \
              -d "input=if [ -f \"/home/${{ secrets.PA_USERNAME }}/learnflask/$file\" ]; then echo \"✅ $file 存在\"; else echo \"❌ $file 不存在\"; fi"
          done
          
          # 等待驗證完成
          sleep 3
          
          # 獲取最終輸出
          FINAL_OUTPUT=$(curl -s "$API_BASE/consoles/$CONSOLE_ID/get_latest_output/" \
            -H "Authorization: Token $API_TOKEN")
            
          echo "最終驗證輸出: $FINAL_OUTPUT"
          
          # 6. 重新加載Web應用
          echo "重新加載Web應用..."
          # 方法1：使用API重新加載
          curl -X POST "$API_BASE/webapps/${{ secrets.PA_USERNAME }}.pythonanywhere.com/reload/" \
            -H "Authorization: Token $API_TOKEN"
            
          # 方法2：觸碰WSGI文件
          curl -X POST "$API_BASE/consoles/$CONSOLE_ID/send_input/" \
            -H "Authorization: Token $API_TOKEN" \
            -d "input=touch /var/www/${{ secrets.PA_USERNAME }}_pythonanywhere_com_wsgi.py"
            
          echo "部署完成！"
      
      - name: Final Cleanup
        if: always()
        run: |
          echo "清理完成，部署結束"

