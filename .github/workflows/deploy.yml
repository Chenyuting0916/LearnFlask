name: Deploy to PythonAnywhere

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Create file list for deployment
        run: |
          # 創建一個包含所有需要上傳文件的列表
          echo "建立部署文件列表..."
          
          # 先列出所有文件
          find . -type f | sort > all_files.txt
          
          # 排除不需要上傳的文件和目錄
          grep -v "^\./\.git/" all_files.txt | \
          grep -v "^\./cache/" | \
          grep -v "^\./app/data/" | \
          grep -v "^\./venv/" | \
          grep -v "^\./\." | \
          grep -v "all_files.txt" > deploy_files.txt
          
          # 顯示將部署的文件數量
          echo "將部署 $(wc -l < deploy_files.txt) 個文件"
          
      - name: Deploy to PythonAnywhere
        run: |
          # 設定基本變量
          BASE_DIR="/home/${{ secrets.PA_USERNAME }}/learnflask"
          API_TOKEN="${{ secrets.PA_API_TOKEN }}"
          API_BASE="https://www.pythonanywhere.com/api/v0/user/${{ secrets.PA_USERNAME }}"
          
          # 確保基本目錄存在
          echo "創建項目根目錄..."
          curl -X POST "$API_BASE/files/path$BASE_DIR/" \
            -H "Authorization: Token $API_TOKEN" || true
          
          # 第一步：找出所有需要創建的目錄
          echo "創建所有必要的目錄..."
          cat deploy_files.txt | xargs -I{} dirname {} | sort | uniq | while read dir; do
            # 跳過當前目錄
            if [ "$dir" = "." ]; then
              continue
            fi
            
            # 把相對路徑轉為 PythonAnywhere 上的絕對路徑
            remote_dir="$BASE_DIR/${dir#./}"
            echo "創建目錄: $remote_dir"
            
            # 創建目錄
            curl -X POST "$API_BASE/files/path$remote_dir/" \
              -H "Authorization: Token $API_TOKEN" || true
          done
          
          # 第二步：創建 data 和 cache 目錄，但不上傳其內容
          echo "創建 data 和 cache 目錄..."
          for dir in app/data cache; do
            remote_dir="$BASE_DIR/$dir"
            echo "創建目錄: $remote_dir"
            curl -X POST "$API_BASE/files/path$remote_dir/" \
              -H "Authorization: Token $API_TOKEN" || true
          done
          
          # 第三步：上傳所有需要部署的文件
          echo "上傳所有文件..."
          cat deploy_files.txt | while read file; do
            # 把相對路徑轉為 PythonAnywhere 上的絕對路徑
            remote_file="$BASE_DIR/${file#./}"
            echo "上傳文件: $file -> $remote_file"
            
            # 上傳文件
            curl -X POST "$API_BASE/files/path$remote_file" \
              -H "Authorization: Token $API_TOKEN" \
              -F "content=@$file" \
              -F "path=$remote_file"
          done
          
          # 第四步：驗證關鍵目錄的內容
          echo "驗證部署..."
          for dir in app/templates app/templates/japanese app/routes config; do
            echo "列出 $dir 目錄內容:"
            curl -sS "$API_BASE/files/path$BASE_DIR/$dir/" \
              -H "Authorization: Token $API_TOKEN" || true
            echo ""
          done
          
          # 重新加載應用
          echo "重新加載 Web 應用..."
          curl -X POST "$API_BASE/webapps/${{ secrets.PA_USERNAME }}.pythonanywhere.com/reload/" \
            -H "Authorization: Token $API_TOKEN"
            
          echo "部署完成!"

