name: Deploy to PythonAnywhere

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 獲取所有歷史記錄，幫助更好地檢測變更
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Install LFTP
        run: |
          sudo apt-get update
          sudo apt-get install -y lftp
      
      - name: Create SFTP deploy script
        run: |
          echo "==== 準備SFTP部署 ===="
          
          # 創建LFTP腳本
          cat > deploy.lftp << EOF
          # 設置連接選項
          set sftp:auto-confirm yes
          set net:max-retries 3
          set net:timeout 10
          set net:reconnect-interval-base 5
          set net:reconnect-interval-multiplier 1
          
          # 連接到PythonAnywhere
          open sftp://${{ secrets.PA_USERNAME }}:${{ secrets.PA_PASSWORD }}@ssh.pythonanywhere.com
          
          # 創建必要目錄
          mkdir -p /home/${{ secrets.PA_USERNAME }}/learnflask/app/data
          mkdir -p /home/${{ secrets.PA_USERNAME }}/learnflask/cache
          
          # 設置排除模式
          glob -a
          
          # 遞迴上傳所有文件，但排除不需要的目錄和文件
          mirror -R --verbose \
            --exclude-glob .git/ \
            --exclude-glob .github/ \
            --exclude-glob venv/ \
            --exclude-glob __pycache__/ \
            --exclude-glob *.pyc \
            --exclude-glob .env \
            --parallel=5 \
            . /home/${{ secrets.PA_USERNAME }}/learnflask/
          
          # 確認關鍵文件
          ls -la /home/${{ secrets.PA_USERNAME }}/learnflask/app/templates/common/
          ls -la /home/${{ secrets.PA_USERNAME }}/learnflask/app/templates/japanese/
          ls -la /home/${{ secrets.PA_USERNAME }}/learnflask/app/routes/
          
          # 退出
          bye
          EOF
      
      - name: Deploy using LFTP
        run: |
          echo "==== 開始SFTP部署 ===="
          # 運行LFTP腳本
          lftp -f deploy.lftp
      
      - name: Reload PythonAnywhere web app
        run: |
          echo "==== 重新加載Web應用 ===="
          
          # 生成簡單的Python腳本重新加載網站
          cat > reload_app.py << 'EOF'
          import os
          import sys
          import time
          import requests
          
          # 獲取環境變量
          api_token = os.environ.get('API_TOKEN')
          username = os.environ.get('PA_USERNAME')
          
          if not all([api_token, username]):
              print("❌ 環境變量缺失")
              sys.exit(1)
          
          # 重新加載網站
          print("重新加載Web應用...")
          try:
              api_url = f"https://www.pythonanywhere.com/api/v0/user/{username}/webapps/{username}.pythonanywhere.com/reload/"
              headers = {'Authorization': f'Token {api_token}'}
              
              response = requests.post(api_url, headers=headers)
              print(f"API響應狀態碼: {response.status_code}")
              print(f"API響應內容: {response.text}")
              
              if response.status_code == 200:
                  print("✅ Web應用已成功重新加載")
              else:
                  print(f"⚠️ 重新加載狀態碼: {response.status_code}")
                  if 'text/html' in response.headers.get('Content-Type', ''):
                      print("⚠️ 收到HTML響應而非API響應，可能是API令牌問題")
                  print(f"響應內容: {response.text[:200]}...")
          except Exception as e:
              print(f"❌ 重新加載Web應用時發生錯誤: {str(e)}")
              sys.exit(1)
          
          # 如果API重新加載失敗，告知使用者需要手動重新加載
          if response.status_code != 200:
              print("\n⚠️ API重新加載似乎失敗。請在PythonAnywhere控制面板手動重新加載應用。")
              print(f"訪問: https://www.pythonanywhere.com/user/{username}/webapps/")
          
          print("✅ 部署完成！")
          EOF
          
          # 設置環境變量並執行Python腳本
          export API_TOKEN="${{ secrets.PA_API_TOKEN }}"
          export PA_USERNAME="${{ secrets.PA_USERNAME }}"
          
          # 執行重新加載腳本
          python reload_app.py
      
      - name: Final Cleanup
        if: always()
        run: |
          echo "清理完成，部署結束"
          # 刪除敏感文件
          rm -f deploy.lftp reload_app.py

